[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom shiny import reactive, render, req\nimport palmerpenguins\nimport seaborn as sns\nimport pandas as pd\n\n# Define color mapping for species\nspecies_colors = {\n    \"Adelie\": \"blue\",\n    \"Gentoo\": \"green\",\n    \"Chinstrap\": \"red\"\n}\n\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Julia's Penguin Data\", fillable=True)\n\nwith ui.sidebar(position=\"right\", open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly bins\", 15)\n    \n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn bins\", 1, 40, 20)\n\n    #Added a checkbox for each species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Chinstrap\"],\n        inline=False,\n    )\n    \n    # Added a checkbox for each island\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Island\",\n        penguins_df['island'].unique().tolist(),\n        selected=penguins_df['island'].unique().tolist(),\n        inline=False,\n    )\n    \n    ui.hr()\n    \n    ui.a(\"Github\", href=\"https://github.com/julia-fangman/cintel-02-data\", target=\"_blank\")\n\n# Accordion Layout with DataTable and DataGrid\nwith ui.accordion(id=\"acc\", open=\"closed\"):\n    with ui.accordion_panel(\"Data Table\"):\n        @render.data_frame\n        def penguin_datatable():\n            selected_species = input.selected_species_list()\n            selected_islands = input.selected_island_list()\n            if not selected_species and not selected_islands:  # If no species or islands are selected, return the original data\n                return penguins_df\n            else:\n                df = penguins_df\n                if selected_species:\n                    df = df[df['species'].isin(selected_species)]\n                if selected_islands:\n                    df = df[df['island'].isin(selected_islands)]\n                return df\n\n    with ui.accordion_panel(\"Data Grid\"):\n        @render.data_frame\n        def penguin_datagrid():\n            selected_species = input.selected_species_list()\n            selected_islands = input.selected_island_list()\n            if not selected_species and not selected_islands:  # If no species or islands are selected, return the original data\n                return penguins_df\n            else:\n                df = penguins_df\n                if selected_species:\n                    df = df[df['species'].isin(selected_species)]\n                if selected_islands:\n                    df = df[df['island'].isin(selected_islands)]\n                return df\n\n# Created a card with tabs for graphs\n# Created a Plotly Histogram showing all species and islands\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Plotly Histogram\"):\n        @render_plotly\n        def plotly_histogram():\n            selected_species = input.selected_species_list()\n            selected_islands = input.selected_island_list()\n            df = penguins_df\n            if selected_species:\n                df = df[df['species'].isin(selected_species)]\n            if selected_islands:\n                df = df[df['island'].isin(selected_islands)]\n            return px.histogram(\n                df,\n                x=input.selected_attribute(),\n                color=\"species\",\n                color_discrete_map=species_colors,  \n                nbins=input.plotly_bin_count(),\n                width=800,\n                height=400,\n                category_orders={input.selected_attribute(): ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']},  # Specify category order for x-axis\n                labels={\n                    input.selected_attribute(): \"Bill Length\",  # Updated x-axis label\n                    \"species\": \"Species\",\n                },\n                title=\"Plotly Histogram\"\n            )\n\n    \n# Created a Seaborn Histogram showing all species and islands\n    with ui.nav_panel(\"Seaborn Histogram\"):\n        @render.plot(alt=\"Seaborn Histogram\")\n        def seaborn_histogram():\n            selected_species = input.selected_species_list()\n            selected_islands = input.selected_island_list()\n            df = penguins_df\n            if selected_species:\n                df = df[df['species'].isin(selected_species)]\n            if selected_islands:\n                df = df[df['island'].isin(selected_islands)]\n            histplot = sns.histplot(\n                data=df, x=\"body_mass_g\", bins=input.seaborn_bin_count(),\n                hue=\"species\", palette=species_colors  \n            )\n            histplot.set_title(\"Seaborn Histogram\")\n            histplot.set_xlabel(\"Mass\")\n            histplot.set_ylabel(\"Count\")\n            return histplot\n\n    \n# Created a Plotly Scatterplot showing all species and islands\n    with ui.nav_panel(\"Plotly Scatterplot\"):\n        @render_plotly\n        def plotly_scatterplot():\n            selected_species = input.selected_species_list()\n            selected_islands = input.selected_island_list()\n            df = penguins_df\n            if selected_species:\n                df = df[df['species'].isin(selected_species)]\n            if selected_islands:\n                df = df[df['island'].isin(selected_islands)]\n            return px.scatter(\n                df,\n                x=\"bill_length_mm\",\n                y=\"body_mass_g\",\n                color=\"species\",\n                color_discrete_map=species_colors,  \n                title=\"Penguins Scatterplot\",\n                labels={\n                    \"bill_length_mm\": \"Bill Length (mm)\",\n                    \"body_mass_g\": \"Body Mass (g)\",\n                },\n                width=1200,\n                height=600,\n            )\n\n    \n# Created a Plotly Boxplot showing all species and islands\n    with ui.nav_panel(\"Plotly Box Plot\"):\n        @render_plotly\n        def plotly_box_plot():\n            selected_species = input.selected_species_list()\n            selected_islands = input.selected_island_list()\n            df = penguins_df\n            if selected_species:\n                df = df[df['species'].isin(selected_species)]\n            if selected_islands:\n                df = df[df['island'].isin(selected_islands)]\n            return px.box(\n                df,\n                x=\"species\",\n                y=input.selected_attribute(),\n                color=\"species\",\n                color_discrete_map=species_colors,  \n                title=\"Penguins Box Plot\",\n                labels={\n                    input.selected_attribute(): input.selected_attribute().replace(\"_\", \" \").title(),\n                    \"species\": \"Species\",\n                },\n            )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    selected_islands = input.selected_island_list()\n    if not selected_species and not selected_islands:  \n        return penguins_df\n    else:\n        df = penguins_df\n        if selected_species:\n            df = df[df['species'].isin(selected_species)]\n        if selected_islands:\n            df = df[df['island'].isin(selected_islands)]\n        return df\n", "type": "text"}]